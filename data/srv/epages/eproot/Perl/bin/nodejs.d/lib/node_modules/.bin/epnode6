#!/usr/bin/env node

/*jslint node:true, nomen: true*/

(function () {
    'use strict';

    var commons = require('../lib/commons'),
        factory = require('../lib/argparse-factory'),
        fs = require('fs'),
        _ = require('underscore'),
        args = factory.parser.parseArgs(),
        startTime = new Date().getTime();

    // Prepare hash (cleaning undefined args and joining arrays)
    _.each(args, function (argument, ix) {
        if (argument === null) {
            delete args[ix];
        } else if (argument instanceof Array) {
            args[ix] = argument.join(' ');
        }
    });

    // Call appropriate module and handle upcoming errors
    factory.modules[args.subcommand](args, function (error) {
        var stopTime = new Date().getTime(),
            logTime = new Date().toISOString().replace('T', ' ').split('.')[0],
            errorMessage;

        if (error) {
            error.reason = error.errno ? commons.error[error.errno] : undefined;

            // remove the stack trace if extended logging is not activated
            if (!args.extended_log) {
                delete error.stack;
            }

            // Let's write the error log synchronoulsy
            /*jslint stupid: true*/
            fs.appendFileSync(process.env.EPAGES_LOG + '/Epnode6.log', logTime + ' ' + args.subcommand + ': ' + JSON.stringify(error, null, 4) + '\n\n');
            /*jslint stupid: false*/

            if (error.reason) {
                errorMessage = error.path + ': ' + error.reason;
            } else if (error.source) {
                errorMessage = error.source + ': ' + error.message + ' at line ' + error.line + ':' + error.col;
            } else {
                errorMessage = error;
            }

            console.error('[ERROR] ' + args.subcommand + ': ' + errorMessage);
            process.exit(1);
        } else {
            console.log('Completed in ' + ((stopTime - startTime) / 1000).toPrecision(4) + ' seconds');
            process.exit();
        }
    });
}());